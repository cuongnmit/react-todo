{"version":3,"sources":["components/TodoTextInput.jsx","components/Header.jsx","actions/index.jsx","constants/ActionTypes.jsx","containers/Header.jsx","components/Link.jsx","containers/FilterLink.jsx","components/Footer.jsx","constants/TodoFilters.jsx","components/TodoItem.jsx","components/TodoList.jsx","selectors/index.jsx","containers/VisibleTodoList.jsx","components/MainSection.jsx","containers/MainSection.jsx","components/App.jsx","reducers/todos.jsx","reducers/visibilityFilter.jsx","reducers/index.jsx","index.js"],"names":["TodoTextInput","state","text","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","className","classnames","edit","this","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","addTodo","length","deleteTodo","id","editTodo","completeTodo","completeAllTodos","clearCompleted","setVisibilityFilter","filter","connect","Link","active","children","setFilter","href","selected","style","cursor","onClick","ownProps","visibilityFilter","dispatch","FILTER_TITLES","Footer","activeCount","completedCount","onClearCompleted","itemWord","Object","keys","map","key","FilterLink","TodoItem","handleDoubleClick","handleSave","element","todo","checked","completed","onDoubleClick","TodoList","filteredTodos","actions","getTodos","todos","getVisibleTodos","createSelector","t","Error","getCompletedTodoCount","reduce","count","VisibleTodoList","bindActionCreators","TodoActions","MainSection","todosCount","readOnly","htmlFor","App","initialState","action","rootReducer","combineReducers","maxId","Math","max","areAllMarked","every","store","createStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fecedb01.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool,\n  };\n\n  state = {\n    text: this.props.text || \"\",\n  };\n\n  handleSubmit = (e) => {\n    const text = e.target.value.trim();\n    if (e.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: \"\" });\n      }\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({ text: e.target.value });\n  };\n\n  handleBlur = (e) => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <input\n        className={classnames({\n          edit: this.props.editing,\n          \"new-todo\": this.props.newTodo,\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoTextInput from './TodoTextInput';\n\nconst Header = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text);\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n);\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import * as types from '../constants/ActionTypes';\n\nexport const addTodo = (text) => ({ type: types.ADD_TODO, text });\nexport const deleteTodo = (id) => ({ type: types.DELETE_TODO, id });\nexport const editTodo = (id, text) => ({ type: types.EDIT_TODO, id, text });\nexport const completeTodo = (id) => ({ type: types.COMPLETE_TODO, id });\nexport const completeAllTodos = () => ({ type: types.COMPLETE_ALL_TODOS });\nexport const clearCompleted = () => ({ type: types.CLEAR_COMPLETED });\nexport const setVisibilityFilter = (filter) => ({\n  type: types.SET_VISIBILITY_FILTER,\n  filter,\n});\n","export const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const EDIT_TODO = 'EDIT_TODO';\nexport const COMPLETE_TODO = 'COMPLETE_TODO';\nexport const COMPLETE_ALL_TODOS = 'COMPLETE_ALL_TODOS';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\n","import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { addTodo } from '../actions';\n\nexport default connect(null, { addTodo })(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst Link = ({ active, children, setFilter }) => (\n  <a\n    href=\"#\"\n    className={classnames({ selected: active })}\n    style={{ cursor: 'pointer' }}\n    onClick={() => setFilter()}\n  >\n    {children}\n  </a>\n);\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n\nexport default Link;\n","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Link);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FilterLink from '../containers/FilterLink';\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n} from '../constants/TodoFilters';\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed',\n};\n\nconst Footer = (props) => {\n  const { activeCount, completedCount, onClearCompleted } = props;\n  const itemWord = activeCount === 1 ? 'item' : 'items';\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map((filter) => (\n          <li key={filter}>\n            <FilterLink filter={filter}>{FILTER_TITLES[filter]}</FilterLink>\n          </li>\n        ))}\n      </ul>\n      {!!completedCount && (\n        <button className=\"clear-completed\" onClick={onClearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","export const SHOW_ALL = 'show_all';\nexport const SHOW_COMPLETED = 'show_completed';\nexport const SHOW_ACTIVE = 'show_active';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport TodoTextInput from './TodoTextInput';\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired,\n  };\n\n  state = {\n    editing: false,\n  };\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true });\n  };\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id);\n    } else {\n      this.props.editTodo(id, text);\n    }\n    this.setState({ editing: false });\n  };\n\n  render() {\n    const { todo, completeTodo, deleteTodo } = this.props;\n\n    let element;\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput\n          text={todo.text}\n          editing={this.state.editing}\n          onSave={(text) => this.handleSave(todo.id, text)}\n        />\n      );\n    } else {\n      element = (\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => completeTodo(todo.id)}\n          />\n          <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\n          <button className=\"destroy\" onClick={() => deleteTodo(todo.id)} />\n        </div>\n      );\n    }\n\n    return (\n      <li\n        className={classnames({\n          completed: todo.completed,\n          editing: this.state.editing,\n        })}\n      >\n        {element}\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ filteredTodos, actions }) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map((todo) => (\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\nexport default TodoList;\n","import { createSelector } from 'reselect';\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n} from '../constants/TodoFilters';\n\nconst getVisibilityFilter = (state) => state.visibilityFilter;\nconst getTodos = (state) => state.todos;\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos;\n      case SHOW_COMPLETED:\n        return todos.filter((t) => t.completed);\n      case SHOW_ACTIVE:\n        return todos.filter((t) => !t.completed);\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter);\n    }\n  }\n);\n\nexport const getCompletedTodoCount = createSelector([getTodos], (todos) =>\n  todos.reduce((count, todo) => (todo.completed ? count + 1 : count), 0)\n);\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as TodoActions from '../actions';\nimport TodoList from '../components/TodoList';\nimport { getVisibleTodos } from '../selectors';\n\nconst mapStateToProps = (state) => ({\n  filteredTodos: getVisibleTodos(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(TodoActions, dispatch),\n});\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default VisibleTodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Footer from './Footer';\nimport VisibleTodoList from '../containers/VisibleTodoList';\n\nconst MainSection = ({ todosCount, completedCount, actions }) => (\n  <section className=\"main\">\n    {!!todosCount && (\n      <span>\n        <input\n          readOnly\n          type=\"checkbox\"\n          className=\"toggle-all\"\n          checked={completedCount === todosCount}\n        />\n        <label htmlFor=\"toggle-all\" onClick={actions.completeAllTodos} />\n      </span>\n    )}\n    <VisibleTodoList />\n    {!!todosCount && (\n      <Footer\n        completedCount={completedCount}\n        activeCount={todosCount - completedCount}\n        onClearCompleted={actions.clearCompleted}\n      />\n    )}\n  </section>\n);\n\nMainSection.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\nexport default MainSection;\n","import { connect } from 'react-redux';\nimport * as TodoActions from '../actions';\nimport { bindActionCreators } from 'redux';\nimport MainSection from '../components/MainSection';\n\nimport { getCompletedTodoCount } from '../selectors';\n\nconst mapStateToProps = (state) => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(TodoActions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainSection);\n","import React from 'react';\nimport Header from '../containers/Header';\nimport MainSection from '../containers/MainSection';\n\nconst App = () => (\n  <section className=\"todoapp\">\n    <div>\n      <Header />\n      <MainSection />\n    </div>\n  </section>\n);\n\nexport default App;\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED,\n} from '../constants/ActionTypes';\n\nconst initialState = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0,\n  },\n];\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text,\n        },\n      ];\n\n    case DELETE_TODO:\n      return state.filter((todo) => todo.id !== action.id);\n\n    case EDIT_TODO:\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, text: action.text } : todo\n      );\n\n    case COMPLETE_TODO:\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      );\n\n    case COMPLETE_ALL_TODOS:\n      const areAllMarked = state.every((todo) => todo.completed);\n      return state.map((todo) => ({\n        ...todo,\n        completed: !areAllMarked,\n      }));\n\n    case CLEAR_COMPLETED:\n      return state.filter((todo) => todo.completed === false);\n\n    default:\n      return state;\n  }\n}\n","import { SET_VISIBILITY_FILTER } from '../constants/ActionTypes';\nimport { SHOW_ALL } from '../constants/TodoFilters';\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter;\n    default:\n      return state;\n  }\n};\n\nexport default visibilityFilter;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nconst rootReducer = combineReducers({\n  todos,\n  visibilityFilter,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport reducer from \"./reducers\";\nimport 'todomvc-common/base.css';\nimport \"todomvc-app-css/index.css\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}